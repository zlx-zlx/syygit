<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.softjx.dao.StudentMapper" >
  <resultMap id="BaseResultMap" type="com.softjx.model.Student" >
    <id column="stu_id" property="stuId" jdbcType="INTEGER" />
    <result column="stu_no" property="stuNo" jdbcType="VARCHAR" />
    <result column="stu_pass" property="stuPass" jdbcType="VARCHAR" />
    <result column="stu_name" property="stuName" jdbcType="VARCHAR" />
    <result column="sch_code" property="schCode" jdbcType="VARCHAR" />
    <result column="stu_sex" property="stuSex" jdbcType="VARCHAR" />
    <result column="stu_birth" property="stuBirth" jdbcType="VARCHAR" />
    <result column="stu_phone" property="stuPhone" jdbcType="VARCHAR" />
    <result column="stu_status" property="stuStatus" jdbcType="VARCHAR" />
    <result column="stu_year" property="stuYear" jdbcType="INTEGER" />
    <result column="stu_education" property="stuEducation" jdbcType="VARCHAR" />
    <result column="stu_class" property="stuClass" jdbcType="VARCHAR" />
    <result column="stu_major" property="stuMajor" jdbcType="VARCHAR" />
    <result column="stu_address" property="stuAddress" jdbcType="VARCHAR" />
    <result column="stu_create_time" property="stuCreateTime" jdbcType="TIMESTAMP" />
    <result column="stu_create_by" property="stuCreateBy" jdbcType="VARCHAR" />
    <result column="stu_flag" property="stuFlag" jdbcType="BIT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    stu_id, stu_no, stu_pass, stu_name, sch_code, stu_sex, stu_birth, stu_phone, stu_status, 
    stu_year, stu_education, stu_class, stu_major, stu_address, stu_create_time, stu_create_by, 
    stu_flag
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.softjx.model.StudentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from student
    where stu_id = #{stuId,jdbcType=INTEGER}
  </select>
   <select id="selectByPrimaryKe" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from student
    where sch_code = #{sch_code,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from student
    where stu_id = #{stuId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.softjx.model.StudentExample" >
    delete from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.softjx.model.Student" >
    insert into student (stu_id, stu_no, stu_pass, 
      stu_name, sch_code, stu_sex, 
      stu_birth, stu_phone, stu_status, 
      stu_year, stu_education, stu_class, 
      stu_major, stu_address, stu_create_time, 
      stu_create_by, stu_flag)
    values (#{stuId,jdbcType=INTEGER}, #{stuNo,jdbcType=VARCHAR}, #{stuPass,jdbcType=VARCHAR}, 
      #{stuName,jdbcType=VARCHAR}, #{schCode,jdbcType=VARCHAR}, #{stuSex,jdbcType=VARCHAR}, 
      #{stuBirth,jdbcType=VARCHAR}, #{stuPhone,jdbcType=VARCHAR}, #{stuStatus,jdbcType=VARCHAR}, 
      #{stuYear,jdbcType=INTEGER}, #{stuEducation,jdbcType=VARCHAR}, #{stuClass,jdbcType=VARCHAR}, 
      #{stuMajor,jdbcType=VARCHAR}, #{stuAddress,jdbcType=VARCHAR}, #{stuCreateTime,jdbcType=TIMESTAMP}, 
      #{stuCreateBy,jdbcType=VARCHAR}, #{stuFlag,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.softjx.model.Student" >
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="stuId != null" >
        stu_id,
      </if>
      <if test="stuNo != null" >
        stu_no,
      </if>
      <if test="stuPass != null" >
        stu_pass,
      </if>
      <if test="stuName != null" >
        stu_name,
      </if>
      <if test="schCode != null" >
        sch_code,
      </if>
      <if test="stuSex != null" >
        stu_sex,
      </if>
      <if test="stuBirth != null" >
        stu_birth,
      </if>
      <if test="stuPhone != null" >
        stu_phone,
      </if>
      <if test="stuStatus != null" >
        stu_status,
      </if>
      <if test="stuYear != null" >
        stu_year,
      </if>
      <if test="stuEducation != null" >
        stu_education,
      </if>
      <if test="stuClass != null" >
        stu_class,
      </if>
      <if test="stuMajor != null" >
        stu_major,
      </if>
      <if test="stuAddress != null" >
        stu_address,
      </if>
      <if test="stuCreateTime != null" >
        stu_create_time,
      </if>
      <if test="stuCreateBy != null" >
        stu_create_by,
      </if>
      <if test="stuFlag != null" >
        stu_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="stuId != null" >
        #{stuId,jdbcType=INTEGER},
      </if>
      <if test="stuNo != null" >
        #{stuNo,jdbcType=VARCHAR},
      </if>
      <if test="stuPass != null" >
        #{stuPass,jdbcType=VARCHAR},
      </if>
      <if test="stuName != null" >
        #{stuName,jdbcType=VARCHAR},
      </if>
      <if test="schCode != null" >
        #{schCode,jdbcType=VARCHAR},
      </if>
      <if test="stuSex != null" >
        #{stuSex,jdbcType=VARCHAR},
      </if>
      <if test="stuBirth != null" >
        #{stuBirth,jdbcType=VARCHAR},
      </if>
      <if test="stuPhone != null" >
        #{stuPhone,jdbcType=VARCHAR},
      </if>
      <if test="stuStatus != null" >
        #{stuStatus,jdbcType=VARCHAR},
      </if>
      <if test="stuYear != null" >
        #{stuYear,jdbcType=INTEGER},
      </if>
      <if test="stuEducation != null" >
        #{stuEducation,jdbcType=VARCHAR},
      </if>
      <if test="stuClass != null" >
        #{stuClass,jdbcType=VARCHAR},
      </if>
      <if test="stuMajor != null" >
        #{stuMajor,jdbcType=VARCHAR},
      </if>
      <if test="stuAddress != null" >
        #{stuAddress,jdbcType=VARCHAR},
      </if>
      <if test="stuCreateTime != null" >
        #{stuCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="stuCreateBy != null" >
        #{stuCreateBy,jdbcType=VARCHAR},
      </if>
      <if test="stuFlag != null" >
        #{stuFlag,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.softjx.model.StudentExample" resultType="java.lang.Integer" >
    select count(*) from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update student
    <set >
      <if test="record.stuId != null" >
        stu_id = #{record.stuId,jdbcType=INTEGER},
      </if>
      <if test="record.stuNo != null" >
        stu_no = #{record.stuNo,jdbcType=VARCHAR},
      </if>
      <if test="record.stuPass != null" >
        stu_pass = #{record.stuPass,jdbcType=VARCHAR},
      </if>
      <if test="record.stuName != null" >
        stu_name = #{record.stuName,jdbcType=VARCHAR},
      </if>
      <if test="record.schCode != null" >
        sch_code = #{record.schCode,jdbcType=VARCHAR},
      </if>
      <if test="record.stuSex != null" >
        stu_sex = #{record.stuSex,jdbcType=VARCHAR},
      </if>
      <if test="record.stuBirth != null" >
        stu_birth = #{record.stuBirth,jdbcType=VARCHAR},
      </if>
      <if test="record.stuPhone != null" >
        stu_phone = #{record.stuPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.stuStatus != null" >
        stu_status = #{record.stuStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.stuYear != null" >
        stu_year = #{record.stuYear,jdbcType=INTEGER},
      </if>
      <if test="record.stuEducation != null" >
        stu_education = #{record.stuEducation,jdbcType=VARCHAR},
      </if>
      <if test="record.stuClass != null" >
        stu_class = #{record.stuClass,jdbcType=VARCHAR},
      </if>
      <if test="record.stuMajor != null" >
        stu_major = #{record.stuMajor,jdbcType=VARCHAR},
      </if>
      <if test="record.stuAddress != null" >
        stu_address = #{record.stuAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.stuCreateTime != null" >
        stu_create_time = #{record.stuCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.stuCreateBy != null" >
        stu_create_by = #{record.stuCreateBy,jdbcType=VARCHAR},
      </if>
      <if test="record.stuFlag != null" >
        stu_flag = #{record.stuFlag,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update student
    set stu_id = #{record.stuId,jdbcType=INTEGER},
      stu_no = #{record.stuNo,jdbcType=VARCHAR},
      stu_pass = #{record.stuPass,jdbcType=VARCHAR},
      stu_name = #{record.stuName,jdbcType=VARCHAR},
      sch_code = #{record.schCode,jdbcType=VARCHAR},
      stu_sex = #{record.stuSex,jdbcType=VARCHAR},
      stu_birth = #{record.stuBirth,jdbcType=VARCHAR},
      stu_phone = #{record.stuPhone,jdbcType=VARCHAR},
      stu_status = #{record.stuStatus,jdbcType=VARCHAR},
      stu_year = #{record.stuYear,jdbcType=INTEGER},
      stu_education = #{record.stuEducation,jdbcType=VARCHAR},
      stu_class = #{record.stuClass,jdbcType=VARCHAR},
      stu_major = #{record.stuMajor,jdbcType=VARCHAR},
      stu_address = #{record.stuAddress,jdbcType=VARCHAR},
      stu_create_time = #{record.stuCreateTime,jdbcType=TIMESTAMP},
      stu_create_by = #{record.stuCreateBy,jdbcType=VARCHAR},
      stu_flag = #{record.stuFlag,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.softjx.model.Student" >
    update student
    <set >
      <if test="stuNo != null" >
        stu_no = #{stuNo,jdbcType=VARCHAR},
      </if>
      <if test="stuPass != null" >
        stu_pass = #{stuPass,jdbcType=VARCHAR},
      </if>
      <if test="stuName != null" >
        stu_name = #{stuName,jdbcType=VARCHAR},
      </if>
      <if test="schCode != null" >
        sch_code = #{schCode,jdbcType=VARCHAR},
      </if>
      <if test="stuSex != null" >
        stu_sex = #{stuSex,jdbcType=VARCHAR},
      </if>
      <if test="stuBirth != null" >
        stu_birth = #{stuBirth,jdbcType=VARCHAR},
      </if>
      <if test="stuPhone != null" >
        stu_phone = #{stuPhone,jdbcType=VARCHAR},
      </if>
      <if test="stuStatus != null" >
        stu_status = #{stuStatus,jdbcType=VARCHAR},
      </if>
      <if test="stuYear != null" >
        stu_year = #{stuYear,jdbcType=INTEGER},
      </if>
      <if test="stuEducation != null" >
        stu_education = #{stuEducation,jdbcType=VARCHAR},
      </if>
      <if test="stuClass != null" >
        stu_class = #{stuClass,jdbcType=VARCHAR},
      </if>
      <if test="stuMajor != null" >
        stu_major = #{stuMajor,jdbcType=VARCHAR},
      </if>
      <if test="stuAddress != null" >
        stu_address = #{stuAddress,jdbcType=VARCHAR},
      </if>
      <if test="stuCreateTime != null" >
        stu_create_time = #{stuCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="stuCreateBy != null" >
        stu_create_by = #{stuCreateBy,jdbcType=VARCHAR},
      </if>
      <if test="stuFlag != null" >
        stu_flag = #{stuFlag,jdbcType=BIT},
      </if>
    </set>
    where stu_id = #{stuId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.softjx.model.Student" >
    update student
    set stu_no = #{stuNo,jdbcType=VARCHAR},
      stu_pass = #{stuPass,jdbcType=VARCHAR},
      stu_name = #{stuName,jdbcType=VARCHAR},
      sch_code = #{schCode,jdbcType=VARCHAR},
      stu_sex = #{stuSex,jdbcType=VARCHAR},
      stu_birth = #{stuBirth,jdbcType=VARCHAR},
      stu_phone = #{stuPhone,jdbcType=VARCHAR},
      stu_status = #{stuStatus,jdbcType=VARCHAR},
      stu_year = #{stuYear,jdbcType=INTEGER},
      stu_education = #{stuEducation,jdbcType=VARCHAR},
      stu_class = #{stuClass,jdbcType=VARCHAR},
      stu_major = #{stuMajor,jdbcType=VARCHAR},
      stu_address = #{stuAddress,jdbcType=VARCHAR},
      stu_create_time = #{stuCreateTime,jdbcType=TIMESTAMP},
      stu_create_by = #{stuCreateBy,jdbcType=VARCHAR},
      stu_flag = #{stuFlag,jdbcType=BIT}
    where stu_id = #{stuId,jdbcType=INTEGER}
  </update>
  
  
  
  <!-- 自定义 -->


 <!-- 返回多表查询的字段名 -->

  <resultMap id="WithSchoolResultMap" type="com.softjx.model.Student" >
    <id column="stu_id" property="stuId" jdbcType="INTEGER" />
    <result column="stu_no" property="stuNo" jdbcType="VARCHAR" />
    <result column="stu_pass" property="stuPass" jdbcType="VARCHAR" />
    <result column="stu_name" property="stuName" jdbcType="VARCHAR" />
    <result column="sch_code" property="schCode" jdbcType="VARCHAR" />
    <result column="stu_sex" property="stuSex" jdbcType="VARCHAR" />
    <result column="stu_birth" property="stuBirth" jdbcType="VARCHAR" />
    <result column="stu_phone" property="stuPhone" jdbcType="VARCHAR" />
    <result column="stu_status" property="stuStatus" jdbcType="VARCHAR" />
    <result column="stu_year" property="stuYear" jdbcType="INTEGER" />
    <result column="stu_education" property="stuEducation" jdbcType="VARCHAR" />
    <result column="stu_class" property="stuClass" jdbcType="VARCHAR" />
    <result column="stu_major" property="stuMajor" jdbcType="VARCHAR" />
    <result column="stu_address" property="stuAddress" jdbcType="VARCHAR" />
    <result column="stu_create_time" property="stuCreateTime" jdbcType="TIMESTAMP" />
    <result column="stu_create_by" property="stuCreateBy" jdbcType="VARCHAR" />
    <result column="stu_flag" property="stuFlag" jdbcType="BIT" />
     <!-- 指定联合查询出的学校字段-->
    <association property="school" javaType="com.softjx.model.School">
    	<id column="sch_code1" property="schCode"/>
    	<result column="sch_name" property="schName"/>
    </association>
  </resultMap>
  
  
  <!-- 多表查询的字段名 -->
   <sql id="Student_School_Column_List">
  	<!-- a.t_id, a.t_name, a.t_age, a.t_enterdate, a.t_sid,b.t_sid as t_sid1,b.t_name as t_name1
  	 -->
  	
  	a.stu_id, a.stu_no, a.stu_pass, a.stu_name, a.sch_code, a.stu_sex, a.stu_birth, a.stu_phone, a.stu_status, 
    a.stu_year, a.stu_education, a.stu_class, a.stu_major, a.stu_address, a.stu_create_time, a.stu_create_by, 
    a.stu_flag , b.sch_code as sch_code1, b.sch_name 
   </sql>
   
   
   <!-- 查询学生同时带学校信息 -->
              
  <select id="selectByExampleWithSchool" resultMap="WithSchoolResultMap">
	   select
	    <if test="distinct">
	      distinct
	    </if>
	    <include refid="Student_School_Column_List" />
		FROM student a
		left join school b on a.sch_code=b.sch_code
	    <if test="_parameter != null">
	      <include refid="Example_Where_Clause" />
	    </if>
	    <if test="orderByClause != null">
	      order by ${orderByClause}
	    </if>
  </select>
  
 
 
 
 
 
 
 <!--   自定义 -->
 <!-- 返回多表查询的字段名 -->
   <resultMap id="BaseSqlResultMap" type="com.softjx.vo.StudentSchoolVo" >
   
    <id column="stu_id" property="id" jdbcType="INTEGER" />
    <result column="stu_no" property="stNo" jdbcType="VARCHAR" />
    <result column="stu_name" property="stName" jdbcType="VARCHAR" />
    
       
    <result column="sch_name" property="schoolName" jdbcType="VARCHAR" />
    
    
    
  </resultMap>
  
  
  
   <select id="getStudentSchoolSqlVo" resultMap="BaseSqlResultMap">
	  SELECT  a.stu_id,a.stu_no,a.stu_name,b.sch_name  from student a,school b
	   where a.sch_code=b.sch_code 
  </select>
  
  
  
  
  
</mapper>